アルゴリズム　＝　問題を解く手順
    方針をいくつかたてる

問題の性質によって最適なアルゴリズムを選択

読み込んでいます…
Pythonアルゴリズム（初級編）.ipynb
Pythonアルゴリズム（初級編）.ipynb_
アルゴリズム・データ構造とは？
定義（アルゴリズム）
「問題を解くための手順」のこと

例：にんじん１本から、星型のにんじんの輪切りを１０個作る

アルゴリズム①

まず輪切りを１０個作った上で、それぞれの輪切りに星型の切込みを入れていく

包丁の回数　９＋１０ × １０ ＝ １０９回

アルゴリズム②

人参を星型の角柱にしたあとで、１０個の輪切りにする

包丁の回数　１０＋９ ＝ １９回

同じ問題でも手順が違えば、手間が何倍も変わる

→　問題の性質によって、最適なアルゴリズムを選択する必要がある

定義（データ構造）
データの集合の①格納規則と②操作方法を決定するもの

例：顧客データの管理のデータ構造による違い

同じデータでも管理方法によって、扱いやすさが変わる

→　データの利用目的によって、最適なデータ構造を選択する必要がある

どのように学んでいくか？
アルゴリズムの基本中の基本である「ソート」がテーマ

ソート　→　データの集合を並べ替えるタスク

ソートについて学ぶ中で、アルゴリズムとデータ構造の基礎的な概念を学んでいく

内容の一例：擬似コード、O表記法、ソートの安定性、分割統治法、動的計画法、など

演習問題もたくさん用意してます

概念と実装面の両方から理解しましょう

アルゴリズムの表現方法
疑似コードとは？
[ ]
↳ 7 個のセルが非表示
計算量とは？
↳ 4 個のセルが非表示
O表記法（O記法）とは？
↳ 4 個のセルが非表示
ソート（基本）
データを昇順もしくは降順に並べ替える処理

昇順　→　小さい値ほど先頭に近くなる（1,2,3,..,100）

降順　→　大きい値ほど先頭に近くなる（100,99,98,...,1）

演習問題①
[ ]
↳ 8 個のセルが非表示
分割統治法と動的計画法
演習問題②
[ ]
↳ 2 個のセルが非表示
分割統治法とソート
分割統治法を用いることで、より効率的なソートアルゴリズムを作ることが出来る

マージソート
[ ]
↳ 7 個のセルが非表示
クイックソート
[ ]
↳ 5 個のセルが非表示
おまけ：バケットソート
[ ]
↳ 8 個のセルが非表示
解答
演習問題①（基本のソート）
[ ]
↳ 32 個のセルが非表示
演習問題②（フィボナッチ数列）
[ ]
↳ 21 個のセルが非表示
演習問題③（マージソート）
[ ]
↳ 5 個のセルが非表示
演習問題④（クイックソート）
[ ]
↳ 9 個のセルが非表示
演習問題⑤（バケットソート）
[ ]
↳ 7 個のセルが非表示
